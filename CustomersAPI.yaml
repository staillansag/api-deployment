openapi: 3.0.1
info:
  title: CustomersAPIOAS
  description: Customer management API to showcase microservices implementation using the webMethods stack
  version: '2.0'
paths:
  /customers/{customerId}:
    summary: /customers/{customerId}
    get:
      description: Use this method to retrieve a customer given its id
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          description: id of the customer that is to be retrieved
          required: true
          allowEmptyValue: false
          schema:
            type: string
            description: id of the customer that is to be retrieved
            readOnly: false
            example: null
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCustomerResponse'
              example: |-
                {
                  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "lastName": "Lyndon",
                  "firstName": "James",
                  "birthDate": "2001-10-01",
                  "status": "ACTIVE"
                }
          links: {}
        '401':
          description: Access Denied
          headers: {}
          content: {}
          links: {}
        '404':
          description: Not found
          headers: {}
          content: {}
          links: {}
    put:
      description: Use this method to update a customer given its id
      operationId: putCustomer
      parameters:
        - name: customerId
          in: path
          description: id of the customer that is to be updated
          required: true
          allowEmptyValue: false
          schema:
            type: string
            description: id of the customer that is to be updated
            readOnly: false
            example: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCanonical'
            example: |-
              {
                "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "lastName": "Lyndon",
                "firstName": "James",
                "birthDate": "2001-10-01",
                "status": "ACTIVE"
              }
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putCustomerResponse'
              example: |-
                {
                  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "lastName": "Lyndon",
                  "firstName": "James",
                  "birthDate": "2001-10-01",
                  "status": "ACTIVE"
                }
          links: {}
        '400':
          description: Bad request
          headers: {}
          content: {}
          links: {}
        '401':
          description: Access Denied
          headers: {}
          content: {}
          links: {}
        '404':
          description: Not found
          headers: {}
          content: {}
          links: {}
    delete:
      description: Use this method to delete a customer given its id
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: id of the customer that is to be deleted
          required: true
          allowEmptyValue: false
          schema:
            type: string
            description: id of the customer that is to be deleted
            readOnly: false
            example: null
      responses:
        '204':
          description: OK
          headers: {}
          content: {}
          links: {}
        '401':
          description: Access Denied
          headers: {}
          content: {}
          links: {}
        '404':
          description: Not found
          headers: {}
          content: {}
          links: {}
    parameters: []
  /customers:
    summary: /customers
    get:
      description: Use this method to list and filter customers
      operationId: getCustomers
      parameters:
        - name: lastName
          in: query
          description: Use this parameter to filter on the last name
          required: false
          allowEmptyValue: false
          schema:
            type: string
            description: Use this parameter to filter on the last name
            readOnly: false
            example: null
        - name: firstName
          in: query
          description: Use this parameter to filter on the first name
          required: false
          allowEmptyValue: false
          schema:
            type: string
            description: Use this parameter to filter on the first name
            readOnly: false
            example: null
        - name: birthDateFrom
          in: query
          description: Use this parameter to filter on the birth date, all customers having a birth date less than this date will be omitted from results
          required: false
          allowEmptyValue: false
          schema:
            type: string
            description: Use this parameter to filter on the birth date, all customers having a birth date less than this date will be omitted from results
            readOnly: false
            example: null
        - name: birthDateTo
          in: query
          description: Use this parameter to filter on the birth date, all customers having a birth date greater than this date will be omitted from results
          required: false
          allowEmptyValue: false
          schema:
            type: string
            description: Use this parameter to filter on the birth date, all customers having a birth date greater than this date will be omitted from results
            readOnly: false
            example: null
        - name: status
          in: query
          description: Use this parameter to filter on the status
          required: false
          allowEmptyValue: false
          schema:
            type: string
            description: Use this parameter to filter on the status
            readOnly: false
            example: null
        - name: pageNumber
          in: query
          description: Use this parameter to paginate results
          required: false
          allowEmptyValue: false
          schema:
            minimum: 1
            type: integer
            description: Use this parameter to paginate results
            format: int64
            readOnly: false
            default: 1
            example: null
        - name: pageSize
          in: query
          description: Use this parameter to set the number of customers returned by a single call
          required: false
          allowEmptyValue: false
          schema:
            maximum: 1000
            type: integer
            description: Use this parameter to set the number of customers returned by a single call
            format: int64
            readOnly: false
            default: 100
            example: null
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCustomersResponse'
              example: |-
                {
                  "customers": [
                    {
                      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "lastName": "Lyndon",
                      "firstName": "James",
                      "birthDate": "2001-10-01",
                      "status": "ACTIVE"
                    }
                  ]
                }
          links: {}
        '400':
          description: Bad request
          headers: {}
          content: {}
          links: {}
        '401':
          description: Access Denied
          headers: {}
          content: {}
          links: {}
    post:
      description: Use this method to create a new customer
      operationId: postCustomer
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCanonical'
            example: |-
              {
                "lastName": "Lyndon",
                "firstName": "James",
                "birthDate": "2001-10-01",
                "status": "ACTIVE"
              }
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postCustomerResponse'
              example: |-
                {
                  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "lastName": "Lyndon",
                  "firstName": "James",
                  "birthDate": "2001-10-01",
                  "status": "ACTIVE"
                }
          links: {}
        '400':
          description: Bad request
          headers: {}
          content: {}
          links: {}
        '401':
          description: Access Denied
          headers: {}
          content: {}
          links: {}
    parameters: []
components:
  schemas:
    postCustomerResponse:
      required:
        - customer
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/CustomerCanonical'
      example: null
    getCustomerResponse:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/CustomerCanonical'
      example: null
    getCustomersResponse:
      required:
        - customers
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerCanonical'
          example: null
      example: null
    CustomerCanonical:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 100
          minLength: 1
          type: string
          description: Customer first name
          example: null
        lastName:
          maxLength: 100
          minLength: 1
          type: string
          description: Customer last name
          example: null
        id:
          type: string
          description: Customer identifier, generated by the server (do not send it in POST requests)
          format: uuid
          example: null
        birthDate:
          type: string
          description: Customer date of birth
          format: date
          example: null
        status:
          type: string
          description: Customer status
          enum:
            - ACTIVE
            - INACTIVE
          default: ACTIVE
          example: null
      example: null
    putCustomerResponse:
      required:
        - customer
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/CustomerCanonical'
      example: null
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  callbacks: {}
